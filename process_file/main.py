import json
import os
import re
import time
import urllib.parse
import urllib.parse
from collections import OrderedDict
from datetime import datetime
from pathlib import Path
from xml.sax.saxutils import escape

import xmltodict
from flask import Flask, flash, request, redirect, render_template, send_file
from markdownify import markdownify as md
from pathvalidate import sanitize_filename

current_dir = os.path.dirname(os.path.abspath(__file__))
current_dir = Path(current_dir)

UPLOAD_FOLDER = current_dir / 'uploads'
DOWNLOAD_FOLDER = current_dir / 'downloads'
ALLOWED_EXTENSIONS = {'xml'}

app = Flask(__name__)

# app = Flask(__name__, template_folder='templates')

app.secret_key = "secret key"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['DOWNLOAD_FOLDER'] = DOWNLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 24 * 1024 * 1024

display_comments = True  # 是否在博文中显示历史评论

p_server = re.compile(r'(imglf\d?)', re.I)

p_img = re.compile(r'<img src="([^"]+?)"([^>]*)>', re.I)

p_ext_img = re.compile(r'<img src="([^"]+?)"[^>]*>', re.I)

gh_prefix = 'raw.githubusercontent.com'

# LOFTER-墨问非名-2019.03.29.xml
p_lofter = re.compile(r'^LOFTER-(.*)-(\d{4}\.\d{2}\.\d{2})')

header = '''<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2019-06-08 20:37"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>
'''

channel_header = '''<channel>
<title>lolirabbit</title>
<link>https://lolirabbit.wordpress.com</link>
<description></description>
<pubDate>Sat, 08 Jun 2019 20:37:37 +0000</pubDate>
<language></language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://lolirabbit.wordpress.com</wp:base_blog_url>
<wp:author>
<wp:author_id>82339102</wp:author_id>
<wp:author_login>
<![CDATA[anywaywillgo]]>
</wp:author_login>
<wp:author_email>
<![CDATA[anywaywillgo@gmail.com]]>
</wp:author_email>
<wp:author_display_name>
<![CDATA[anywaywillgo]]>
</wp:author_display_name>
<wp:author_first_name>
<![CDATA[]]>
</wp:author_first_name>
<wp:author_last_name>
<![CDATA[]]>
</wp:author_last_name>
</wp:author>
<generator>http://wordpress.com/</generator>
<image>
    <url>http://s0.wp.com/i/buttonw-com.png</url>
    <title>lolirabbit</title>
    <link>https://lolirabbit.wordpress.com</link>
</image>
'''

footer = '''</channel>
</rss>'''

sample_item_a = '''
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>'''

sample_item_b = '''
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:post_password></wp:post_password>
<wp:is_sticky>0</wp:is_sticky>
'''

sample_item_footer = '''
<wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1560026174]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
</wp:postmeta>
<wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31631303363]]></wp:meta_value>
</wp:postmeta>
</item>
'''
wordpress_prefix = 'https://samplewordpressblog.wordpress.com/'


def get_di_files_w_suffix(rootdir, suffixes):
    file_paths = []
    files = os.listdir(rootdir)
    if isinstance(suffixes, str):
        suffixes = (suffixes,)
    for file in files:
        file_path = Path(rootdir) / file
        if file_path.suffix.lower() in suffixes and file_path.is_file():
            file_paths.append(file_path)
    file_paths.sort()
    return file_paths


def get_di_xml(rootdir):
    suffixes = ".xml"
    return get_di_files_w_suffix(rootdir, suffixes)


# ================创建目录================
def make_dir(file_path):
    if not os.path.exists(file_path):
        try:
            os.mkdir(file_path)
        except:
            pass


# ================运行时间计时================
def run_time(start_time):
    '''
    :param start_time:
    :return: 运行时间
    '''
    run_time = time.time() - start_time
    if run_time < 60:  # 两位小数的秒
        show_run_time = '{:.2f}秒'.format(run_time)
    elif run_time < 3600:  # 分秒取整
        show_run_time = '{:.0f}分{:.0f}秒'.format(run_time // 60, run_time % 60)
    else:  # 时分秒取整
        show_run_time = '{:.0f}时{:.0f}分{:.0f}秒'.format(run_time // 3600, run_time % 3600 // 60, run_time % 60)
    return show_run_time


def list2str(some_list):
    some_string = ''
    if isinstance(some_list, list):
        some_string = "[" + ", ".join(some_list) + "]"
    elif isinstance(some_list, str):
        some_string = some_list
    return some_string


def format_hugo_title(title):
    if "'" in title or "#" in title or "@" in title or "[" in title or "]" in title or "+" in title or "!" in title or ":" in title or title.isdigit():  # or "：" in title or "（" in title or "）" in title
        title_info = '"' + title + '"'
    else:
        title_info = title
    return title_info


def safe(title):
    safe_title = title.replace(':', '：')
    safe_title = safe_title.replace('!', '！')
    safe_title = safe_title.replace("'", "-")
    # safe_title = title.replace("'", "’")
    safe_title = safe_title.replace('/', '／')
    safe_title = safe_title.replace('\\', '＼')
    safe_title = sanitize_filename(safe_title)
    return safe_title


# ================写入文件================
def write_text(file_path, text):
    f = open(file_path, mode='w', encoding="utf-8")
    try:
        f.write(text)
    finally:
        f.close()


def deduce_list(input_list):
    output_list = list(OrderedDict.fromkeys(input_list))
    return output_list


def int2time(timestamp, formatter='%Y-%m-%d %H:%M:%S'):
    timestamp = int(timestamp)
    timestamp = timestamp / 1000
    time_str = datetime.utcfromtimestamp(timestamp).strftime(formatter)

    return time_str


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def get_comments(post, id2name_dict):
    md_comment_section = ''
    html_comment_section = ''

    commentList = post['commentList']
    comments = commentList['comment']
    if not isinstance(comments, list):
        comments = [comments]
    if comments:
        comments.reverse()

        md_comment_section += '\n\n<!-- more -->\n\n---\n'
        html_comment_section += '\n\n<p><!--more--></p>\n\n<hr />\n'

        for j in range(len(comments)):
            comment = comments[j]
            publisherUserId = comment['publisherUserId']
            publisherNick = comment['publisherNick']
            publisherContent = comment['content']
            commentPublishTime = comment['publishTime']
            commentPublishTime = int2time(commentPublishTime)
            replyToUserId = comment['replyToUserId']
            # decodedpublisherUserId = base64.b64decode(publisherUserId)  # 然而还是乱码……
            # decodedreplyToUserId = base64.b64decode(replyToUserId)  # 然而还是乱码……
            # publisherContentMD = html2text.html2text(publisherContent).strip('\r\n\t ')
            # publisherContentMD = md(publisherContent).strip('\r\n\t ')
            # publisherContentText = html.unescape(publisherContent)

            replyToStr = ''
            if replyToUserId in id2name_dict:
                Nicks = id2name_dict[replyToUserId]
                Nicks_only = [x[0] for x in Nicks]
                Nicks_only = deduce_list(Nicks_only)
                if len(Nicks_only) >= 2:
                    # print(Nicks)
                    pass
                Nicks.sort(key=lambda x: x[-1])
                Nick = Nicks[-1][0]
                replyToStr = ' 回复【' + md(Nick) + '】'

            md_line = '\n`' + commentPublishTime + '` 【' + md(publisherNick) + '】' + replyToStr + ' ' + md(
                publisherContent) + '\n'
            html_line = '\n<p><code>' + commentPublishTime + '</code> 【' + publisherNick + '】' + replyToStr + ' ' + publisherContent + '</p>\n'

            md_comment_section += md_line
            html_comment_section += html_line
    return md_comment_section, html_comment_section


def get_id2name_dict(doc):
    id2name_dict = {}
    posts = doc['lofterBlogExport']['PostItem']

    if not isinstance(posts, list):
        posts = [posts]

    posts.reverse()
    for i in range(len(posts)):
        post = posts[i]
        if 'commentList' in post:
            commentList = post['commentList']
            comments = commentList['comment']
            if not isinstance(comments, list):
                comments = [comments]
            for j in range(len(comments)):
                comment = comments[j]
                publisherUserId = comment['publisherUserId']
                publisherNick = comment['publisherNick']
                commentPublishTime = comment['publishTime']
                commentPublishTime = int2time(commentPublishTime)
                if publisherUserId not in id2name_dict:
                    id2name_dict[publisherUserId] = []
                tup = (publisherNick, commentPublishTime)
                id2name_dict[publisherUserId].append(tup)
    return id2name_dict


def get_https_url(jpg_url):
    m_server = re.search(p_server, jpg_url)
    jpg_url_https = jpg_url.replace('http://', 'https://', 1)
    jpg_name = Path(jpg_url).name

    if m_server and 'netease.com' in jpg_url:
        server = m_server.group(1)
        # jpg_url = 'http://' + server + '.nosdn.127.net/img/' + jpg_name
        jpg_url_https = 'https://' + server + '.nosdn.127.net/img/' + jpg_name

    # ================图床迁移-GitHub================
    down_jpg_name = jpg_name
    if m_server and not Path(jpg_url).stem.isdigit():
        down_jpg_name = 'img_' + jpg_name
        # print(down_jpg_name)

    # GitHub = Path(GitHubPathStr)
    # jpg_dir = GitHub / repo_name
    # jpg_path = jpg_dir / down_jpg_name
    # # print(jpg_path)
    #
    # if jpg_path.exists():
    #     url_segments = [gh_prefix, owner, repo_name, 'master', down_jpg_name]
    #     jpg_url_https = 'https://' + '/'.join(url_segments)

    return jpg_url_https


def markdown_pic(match):
    jpg_url = match.group(1)
    jpg_url = jpg_url.split('?')[0]
    jpg_url_https = get_https_url(jpg_url)
    string = '\n![](' + jpg_url_https + ')\n'
    return string


def get_item_str(i, title, publishTime, modifyTime, author, categories, tags, permalink, html_content):
    item_str = '<item>'
    link = wordpress_prefix + permalink
    pubDate = ''
    description = ''
    excerpt = ''
    post_id = 2 * i + 1
    post_date = publishTime
    post_date_gmt = publishTime
    item_str += '\n<title>' + escape(title) + '</title>'
    item_str += '\n<link>' + link + '</link>'
    item_str += '\n<pubDate>' + pubDate + '</pubDate>'
    item_str += '\n<dc:creator>' + author + '</dc:creator>'
    item_str += '\n<guid isPermaLink="false">https://lolirabbit.wordpress.com/?p=' + str(post_id) + '</guid>'
    item_str += '\n<description>' + description + '</description>'
    item_str += '\n<content:encoded><![CDATA[' + html_content + ']]></content:encoded>'
    item_str += '\n<excerpt:encoded><![CDATA[' + excerpt + ']]></excerpt:encoded>'
    item_str += '\n<wp:post_id>' + str(post_id) + '</wp:post_id>'
    item_str += '\n<wp:post_date>' + post_date + '</wp:post_date>'
    item_str += '\n<wp:post_date_gmt>' + post_date_gmt + '</wp:post_date_gmt>'
    item_str += sample_item_a
    item_str += '\n<wp:post_name>' + permalink + '</wp:post_name>'
    item_str += sample_item_b

    for category in categories:
        quote_category = urllib.parse.quote(category)
        example_category_str = '<category domain="category" nicename="' + quote_category + '"><![CDATA[' + category + ']]></category>'
        item_str += example_category_str

    for tag in tags:
        quote_tag = urllib.parse.quote(tag)
        example_tag_str = '<category domain="post_tag" nicename="' + quote_tag + '"><![CDATA[' + tag + ']]></category>'
        item_str += example_tag_str

    item_str += sample_item_footer
    return item_str


def generate(doc, id2name_dict, author, display_comments):
    posts = doc['lofterBlogExport']['PostItem']

    if not isinstance(posts, list):
        posts = [posts]
    # posts.reverse()

    output_xml = header + channel_header

    all_pic_urls = []

    for i in range(len(posts)):
        post = posts[i]
        raw_title = post['title']

        # ================标题================
        if isinstance(raw_title, list):  # 长文章
            raw_title = raw_title[0]

        if raw_title:
            title = raw_title
        else:
            title = str(i + 1)

        # ================时间================
        publishTime = post['publishTime']
        modifyTime = publishTime
        if 'modifyTime' in post:
            modifyTime = post['modifyTime']

        publishDate = int2time(publishTime, formatter='%Y-%m-%d')
        publishTime = int2time(publishTime)
        modifyTime = int2time(modifyTime)

        # ================元数据================
        tag = ''
        if 'tag' in post:
            tag = post['tag']

        post_type = post['type']
        permalink = post['permalink']

        categories = [post_type]
        tags = tag.split(',')

        caption = ''
        if 'caption' in post:
            caption = post['caption']

        embed = {}
        if 'embed' in post:
            embed = post['embed']
        if embed != {}:
            embed = json.loads(embed)

        raw_content = ''
        html_full_content = raw_content
        md_content = raw_content

        post_pic_urls = []

        produce = True
        # ================文字================
        if post_type == 'Text':
            if 'content' in post and post['content']:
                raw_content = post['content']
            md_content = re.sub(p_img, markdown_pic, raw_content)
            post_pic_urls = p_ext_img.findall(raw_content)
            # print(post_pic_urls)

        # ================长文章================
        elif post_type == 'Long':
            if 'content' in post and post['content']:
                raw_content = post['content']
            md_content = re.sub(p_img, markdown_pic, raw_content)
            post_pic_urls = p_ext_img.findall(raw_content)
            # print(post_pic_urls)

        # ================问答================
        elif post_type == 'Ask':
            produce = False
        # ================图片================
        elif post_type == 'Photo':
            photoLinks = ''
            if 'photoLinks' in post:
                photoLinks = post['photoLinks']
            photoLinks = json.loads(photoLinks)  # 将json字符串转换成python对象

            if isinstance(caption, str):
                md_content = caption

            for photoLink in photoLinks:
                if 'raw' in photoLink and isinstance(photoLink['raw'], str):
                    jpg_url = photoLink['raw']
                elif 'orign' in photoLink and isinstance(photoLink['orign'], str):
                    jpg_url = photoLink['orign']
                else:
                    jpg_url = ''
                    # print(photoLink)
                if jpg_url != '':
                    jpg_url_https = get_https_url(jpg_url)
                    md_content += '\n\n![](' + jpg_url_https + ')'
                    # print(jpg_url_https)
                    post_pic_urls.append(jpg_url_https)
                    # print(post_pic_urls)

        # ================视频================
        elif post_type == 'Video':
            originUrl = ''
            if 'originUrl' in embed:
                originUrl = embed['originUrl']

            if isinstance(caption, str):
                md_content = caption

            if originUrl != '':
                md_content += '\n\n[' + originUrl + '](' + originUrl + ')'
        # ================音乐================
        elif post_type == 'Music':
            listenUrl = ''
            if 'listenUrl' in embed:
                listenUrl = embed['listenUrl']

            song_name = ''
            if 'song_name' in embed:
                song_name = embed['song_name']
            song_name = song_name.replace('%20', ' ')

            if isinstance(caption, str):
                md_content = caption

            if song_name != '' and listenUrl != '':
                md_content += '\n\n[' + song_name + '](' + listenUrl + ')'
            elif song_name != '':
                md_content += '\n\n【' + song_name + '】'

        # ================如有例外================
        else:
            produce = False

        # html_content = markdown2.markdown(md_content)
        if post_pic_urls:
            all_pic_urls.extend(post_pic_urls)
            # print(post_pic_urls)

        html_content = md_content
        html_content = re.sub('!\[(.*)\]\((.+)\)', r'<img src="\2" alt="\1" />', html_content)  # 图片
        html_content = re.sub('\[(.*)\]\((.+)\)', r'<a href="\2">\1</a>', html_content)  # 链接

        html_content = html_content.strip()

        md_full_content = md_content
        html_full_content = html_content
        if 'commentList' in post and display_comments:
            md_comment_section, html_comment_section = get_comments(post, id2name_dict)
            md_full_content += md_comment_section
            html_full_content += html_comment_section

        if produce:
            # html_full_content = markdown2.markdown(md_content)
            item_str = get_item_str(i, title, publishTime, modifyTime, author, categories, tags, permalink,
                                    html_full_content)
            # print(item_str)
            output_xml += item_str

    output_xml += footer

    all_pic_urls = deduce_list(all_pic_urls)
    all_pic_urls = [x.split('?')[0] for x in all_pic_urls]
    all_pic_urls = [x for x in all_pic_urls if 'raw.githubusercontent.com' not in x]
    output_pictxt = '\r\n'.join(all_pic_urls)

    return output_xml, output_pictxt


@app.route('/')
def upload_form():
    return render_template('upload.html')


@app.route('/', methods=['POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('没有文件内容')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            flash('没有选取供上传的文件')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = sanitize_filename(file.filename)
            save_path = app.config['UPLOAD_FOLDER'] / filename
            file.save(save_path)
            flash('文件成功上传')
            xml_file_path = save_path
            # xml_text = open(xml_file_path).read()
            with open(xml_file_path, mode="r", encoding="utf-8") as fp:
                xml_text = fp.read()

            # 处理特殊字符
            xml_text = re.sub(u"[\x00-\x08\x0b-\x0c\x0e-\x1f]+", u"", xml_text)
            flash('处理特殊字符')

            doc = xmltodict.parse(xml_text)

            author = '你的lofter昵称'
            m_lofter = re.search(p_lofter, xml_file_path.stem)
            if m_lofter:
                author = m_lofter.group(1)

            id2name_dict = get_id2name_dict(doc)

            output_xml, output_pictxt = generate(doc, id2name_dict, author, display_comments)

            output_xml_name = 'Wordpress-' + author + '.xml'
            output_xml_path = app.config['UPLOAD_FOLDER'] / output_xml_name

            output_txt_name = 'IDM-pictures-' + author + '.txt'
            output_txt_path = app.config['UPLOAD_FOLDER'] / output_txt_name

            write_text(output_xml_path, output_xml)
            write_text(output_txt_path, output_pictxt)

            # return redirect('/')
            # send file name as parameter to downlad
            # return redirect('/downloadfile/' + filename)
            return redirect('/downloadfile/' + output_xml_name)
        else:
            flash('允许的文件类型为xml')
            return redirect(request.url)


# Download API
@app.route("/downloadfile/<filename>", methods=['GET'])
def download_file(filename):
    return render_template('download.html', value=filename)


@app.route('/return-files/<filename>')
def return_files_tut(filename):
    file_path = str(UPLOAD_FOLDER / filename)
    return send_file(file_path, as_attachment=True, attachment_filename='')


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0')
